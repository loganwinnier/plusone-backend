generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  isAdmin      Boolean   @default(false) @map("is_admin")
  createdAt    DateTime? @default(now()) @map("created_at")
  email        String    @id @db.VarChar(64)
  firstName    String    @map("first_name") @db.VarChar(35)
  lastName     String    @map("last_name") @db.VarChar(35)
  lastLogin    DateTime? @default(now()) @map("last_login")
  password     String
  phoneNumber  String?   @unique @map("phone_number")
  events       Event[]
  likes        Like[]
  profile      Profile?
  chatsUserOne Chat[]    @relation(name: "UserOne")
  chatsUserTwo Chat[]    @relation(name: "UserTwo")

  @@map("users")
}

model Profile {
  email       String  @id @db.VarChar(64)
  geoLocation Float[] @map("geo_location") @db.DoublePrecision
  city        String  @db.VarChar(50)
  state       String  @db.VarChar(40)
  age         Int
  bio         String  @db.VarChar(250)
  gender      String  @db.VarChar(20)
  range       Int
  user        User    @relation(fields: [email], references: [email], onDelete: Cascade)
  images      Image[]

  @@map("profiles")
}

model Event {
  eventId     String   @id @default(uuid()) @map("event_id")
  geoLocation Float[]  @map("geo_location") @db.DoublePrecision
  city        String   @db.VarChar(50)
  state       String   @db.VarChar(40)
  title       String   @db.VarChar(50)
  dateTime    DateTime @map("date_time")
  createdAt   DateTime @default(now()) @map("created_at")
  description String   @db.VarChar(250)
  payment     Int?
  hostEmail   String   @map("host_email") @db.VarChar(64)
  host        User     @relation(fields: [hostEmail], references: [email], onDelete: Cascade)
  likes       Like[]
  chats       Chat[]
  images      Image[]

  @@map("events")
}

model Like {
  likesEventId String  @map("likes_event_id")
  userEmail    String  @map("user_email")
  userLikes    Boolean @map("user_likes")
  eventLikes   Boolean @map("event_likes")
  user         User    @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  event        Event   @relation(fields: [likesEventId], references: [eventId], onDelete: Cascade)

  @@id(name: "likeId", [likesEventId, userEmail])
  @@map("likes")
}

model Chat {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now()) @map("created_at")
  lastMessage        DateTime? @map("last_message")
  lastMessageContent String?   @map("last_message_content")
  userOneEmail       String    @map("user_one_email")
  userTwoEmail       String    @map("user_two_email")
  userOne            User      @relation(name: "UserOne", fields: [userOneEmail], references: [email], onDelete: Cascade)
  userTwo            User      @relation(name: "UserTwo", fields: [userTwoEmail], references: [email], onDelete: Cascade)
  associatedEvents   Event[]
  messages           Message[]

  @@unique([userOneEmail, userTwoEmail])
  @@map("chats")
}

model Message {
  messageId Int      @id @default(autoincrement()) @map("message_id")
  chatId    String   @map("chat_id")
  sender    String
  recipient String
  sentAt    DateTime @default(now()) @map("sent_at")
  content   String   @db.VarChar(250)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Image {
  id           Int      @id @default(autoincrement())
  url          String
  eventId      String?  @map("event_id")
  userEmail    String?  @map("user_email")
  event        Event?   @relation(fields: [eventId], references: [eventId], onDelete: Cascade)
  profile      Profile? @relation(fields: [profileEmail], references: [email], onDelete: Cascade)
  profileEmail String?  @db.VarChar(64)

  @@map("images")
}
